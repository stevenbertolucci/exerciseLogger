{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Steven Bertolucci\\\\Downloads\\\\exercise-MERN\\\\exercise-ui\\\\src\\\\pages\\\\CreateExercisePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CreateExercisePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [name, setName] = useState('');\n  const [reps, setReps] = useState();\n  const [weight, setWeight] = useState();\n  const [unit, setUnit] = useState('');\n  const [date, setDate] = useState('');\n  const addExercise = async () => {\n    const newExercise = {\n      name,\n      reps,\n      weight,\n      unit,\n      date\n    };\n    const response = await fetch('/exercises', {\n      method: 'POST',\n      body: JSON.stringify(newExercise),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status === 201) {\n      alert(\"Successfully added the exercise!\");\n    } else {\n      alert(`Failed to add exercise, status code = ${response.status}`);\n    }\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter exercise here\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter # of reps\",\n      value: reps,\n      onChange: e => setReps(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter weight\",\n      value: weight,\n      onChange: e => setWeight(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter unit (kgs or lbs)\",\n      value: unit,\n      onChange: e => setUnit(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter date\",\n      value: date,\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addExercise,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateExercisePage, \"uWbJM4rpgq6PiyPCqyTHnxWNUOU=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateExercisePage;\nexport default CreateExercisePage;\nvar _c;\n$RefreshReg$(_c, \"CreateExercisePage\");","map":{"version":3,"names":["React","useState","useNavigate","CreateExercisePage","navigate","name","setName","reps","setReps","weight","setWeight","unit","setUnit","date","setDate","addExercise","newExercise","response","fetch","method","body","JSON","stringify","headers","status","alert","e","target","value"],"sources":["C:/Users/Steven Bertolucci/Downloads/exercise-MERN/exercise-ui/src/pages/CreateExercisePage.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const CreateExercisePage = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [name, setName] = useState('');\r\n    const [reps, setReps] = useState();\r\n    const [weight, setWeight] = useState();\r\n    const [unit, setUnit] = useState('');\r\n    const [date, setDate] = useState('');\r\n\r\n    const addExercise = async () => {\r\n        const newExercise = {name, reps, weight, unit, date};\r\n        const response = await fetch('/exercises', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newExercise),\r\n            headers: {'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if(response.status === 201) {\r\n            alert(\"Successfully added the exercise!\");\r\n        } else {\r\n            alert(`Failed to add exercise, status code = ${response.status}`);\r\n        }\r\n        navigate(\"/\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Add Exercise</h1>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter exercise here\"\r\n                value={name}\r\n                onChange={e => setName(e.target.value)} />\r\n            <input\r\n                type=\"number\"\r\n                placeholder=\"Enter # of reps\"\r\n                value={reps}\r\n                onChange={e => setReps(e.target.value)} />\r\n            <input\r\n                type=\"number\"\r\n                placeholder=\"Enter weight\"\r\n                value={weight}\r\n                onChange={e => setWeight(e.target.value)} />\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter unit (kgs or lbs)\"\r\n                value={unit}\r\n                onChange={e => setUnit(e.target.value)} />\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter date\"\r\n                value={date}\r\n                onChange={e => setDate(e.target.value)} />\r\n            <button\r\n                onClick={addExercise}\r\n            >Add</button>    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateExercisePage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,WAAW,QAAQ,kBAAkB;AAAC;AAE/C,OAAO,MAAMC,kBAAkB,GAAG,MAAM;EAAA;EACpC,MAAMC,QAAQ,GAAGF,WAAW,EAAE;EAE9B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,EAAE;EAClC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,EAAE;EACtC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMc,WAAW,GAAG,YAAY;IAC5B,MAAMC,WAAW,GAAG;MAACX,IAAI;MAAEE,IAAI;MAAEE,MAAM;MAAEE,IAAI;MAAEE;IAAI,CAAC;IACpD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC;MACjCO,OAAO,EAAE;QAAC,cAAc,EAAE;MAC1B;IACJ,CAAC,CAAC;IACF,IAAGN,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;MACxBC,KAAK,CAAC,kCAAkC,CAAC;IAC7C,CAAC,MAAM;MACHA,KAAK,CAAE,yCAAwCR,QAAQ,CAACO,MAAO,EAAC,CAAC;IACrE;IACApB,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC;EAED,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAqB,eACrB;MACI,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,qBAAqB;MACjC,KAAK,EAAEC,IAAK;MACZ,QAAQ,EAAEqB,CAAC,IAAIpB,OAAO,CAACoB,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAC9C;MACI,IAAI,EAAC,QAAQ;MACb,WAAW,EAAC,iBAAiB;MAC7B,KAAK,EAAErB,IAAK;MACZ,QAAQ,EAAEmB,CAAC,IAAIlB,OAAO,CAACkB,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAC9C;MACI,IAAI,EAAC,QAAQ;MACb,WAAW,EAAC,cAAc;MAC1B,KAAK,EAAEnB,MAAO;MACd,QAAQ,EAAEiB,CAAC,IAAIhB,SAAS,CAACgB,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAChD;MACI,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,yBAAyB;MACrC,KAAK,EAAEjB,IAAK;MACZ,QAAQ,EAAEe,CAAC,IAAId,OAAO,CAACc,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAC9C;MACI,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,YAAY;MACxB,KAAK,EAAEf,IAAK;MACZ,QAAQ,EAAEa,CAAC,IAAIZ,OAAO,CAACY,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAC9C;MACI,OAAO,EAAEb,WAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QACZ;EAAA;IAAA;IAAA;IAAA;EAAA,QACX;AAEd,CAAC;AAAA,GA1DYZ,kBAAkB;EAAA,QACVD,WAAW;AAAA;AAAA,KADnBC,kBAAkB;AA4D/B,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}